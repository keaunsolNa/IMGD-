<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nks.imgd.mapper.user.UserTableMapper">

    <select id="findAllUsers" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT USER_ID
             , NAME
             , EMAIL
             , NICK_NAME
             , PICTURE_ID
             , LOGIN_TYPE
             , LAST_LOGIN_DATE
             , REG_DTM
             , REG_ID
             , MOD_DTM
             , MOD_ID
          FROM USER_TABLE
    </select>

    <select id="findById" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT USER_ID
             , NAME
             , EMAIL
             , NICK_NAME
             , PICTURE_ID
             , F_GET_PICTURE_NM(USER_ID) AS PICTURE_NM
             , LOGIN_TYPE
             , LAST_LOGIN_DATE
             , REG_DTM
             , REG_ID
             , MOD_DTM
             , MOD_ID
          FROM USER_TABLE
         WHERE USER_ID = #{userId}
    </select>

    <select id="findHighestUserRole" resultType="com.nks.imgd.dto.Role.RolesDTO">
        SELECT T3.ROLE_ID
             , T3.ROLE_NM
          FROM USER_TABLE T1
          JOIN USER_ROLE T2
            ON T1.USER_ID = T2.USER_ID
          JOIN ROLES T3
            ON T2.ROLE_ID = T3.ROLE_ID
         WHERE T1.USER_ID = #{userId}
         ORDER BY T3.ROLE_ID DESC
         LIMIT 1
    </select>

    <select id="findFriendEachOther" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T3.USER_ID
             , F_GET_USER_NM(T3.USER_ID) NAME
             , T3.REG_DTM
             , T1.PICTURE_ID
             , F_GET_PICTURE_NM(T3.USER_ID) PICTURE_NM
         FROM USER_TABLE T1
         JOIN FRIEND_TABLE T2
           ON T1.USER_ID = T2.USER_ID
         JOIN USER_FRIEND_TABLE T3
           ON T2.FRIEND_ID = T3.FRIEND_ID
        WHERE T1.USER_ID = #{userId}
          AND T3.RELATIONSHIP = 'F'
          AND T1.USER_ID IN (SELECT A3.USER_ID
                               FROM USER_TABLE A1
                               JOIN FRIEND_TABLE A2
                                 ON A1.USER_ID = A2.USER_ID
                               JOIN USER_FRIEND_TABLE A3
                                 ON A2.FRIEND_ID = A3.FRIEND_ID
                              WHERE A1.USER_ID = T3.USER_ID
                                AND A3.RELATIONSHIP = 'F')

    </select>

    <select id="findFriendWhoAddMeButImNot" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T3.USER_ID
             , T3.NAME
             , T1.REG_DTM
             , T3.PICTURE_ID
             , F_GET_PICTURE_NM(T3.USER_ID) AS PICTURE_NM
          FROM USER_FRIEND_TABLE T1
          JOIN FRIEND_TABLE T2
            ON T1.FRIEND_ID = T2.FRIEND_ID
          JOIN USER_TABLE T3
            ON T2.USER_ID = T3.USER_ID
         WHERE T1.USER_ID = #{userId}
           AND T1.RELATIONSHIP = 'F'
           AND T3.USER_ID NOT IN (SELECT A3.USER_ID
                                    FROM USER_TABLE A1
                                    JOIN FRIEND_TABLE A2
                                      ON A1.USER_ID = A2.USER_ID
                                    JOIN USER_FRIEND_TABLE A3
                                      ON A2.FRIEND_ID = A3.FRIEND_ID
                                   WHERE A1.USER_ID = #{userId}
                                  )
    </select>

    <select id="findFriendWhoImAddButNot" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T3.USER_ID
             , F_GET_USER_NM(T3.USER_ID) AS NAME
             , T1.REG_DTM
             , F_GET_PICTURE_NM(T3.USER_ID) AS PICTURE_NM
         FROM USER_TABLE T1
         JOIN FRIEND_TABLE T2
           ON T1.USER_ID = T2.USER_ID
         JOIN USER_FRIEND_TABLE T3
           ON T2.FRIEND_ID = T3.FRIEND_ID
        WHERE T1.USER_ID = #{userId}
          AND T3.RELATIONSHIP = 'F'
          AND T3.USER_ID NOT IN ( SELECT A3.USER_ID
                                    FROM USER_FRIEND_TABLE A1
                                    JOIN FRIEND_TABLE A2
                                      ON A1.FRIEND_ID = A2.FRIEND_ID
                                    JOIN USER_TABLE A3
                                      ON A2.USER_ID = A3.USER_ID
                                   WHERE A1.USER_ID = #{userId} )
    </select>

    <select id="findFriendWhoImAddButReject" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T3.USER_ID
             , F_GET_USER_NM(T3.USER_ID) AS NAME
             , T1.REG_DTM
             , F_GET_PICTURE_NM(T3.USER_ID) AS PICTURE_NM
        FROM USER_TABLE T1
        JOIN FRIEND_TABLE T2
          ON T1.USER_ID = T2.USER_ID
        JOIN USER_FRIEND_TABLE T3
          ON T2.FRIEND_ID = T3.FRIEND_ID
        WHERE T1.USER_ID = #{userId}
          AND T3.RELATIONSHIP = 'F'
          AND T3.USER_ID IN ( SELECT A3.USER_ID
                                FROM USER_FRIEND_TABLE A1
                                JOIN FRIEND_TABLE A2
                                  ON A1.FRIEND_ID = A2.FRIEND_ID
                                JOIN USER_TABLE A3
                                  ON A2.USER_ID = A3.USER_ID
                                WHERE A1.USER_ID = #{userId}
                                  AND A1.RELATIONSHIP = 'R')
    </select>

    <select id="findFriend" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T3.USER_ID
             , F_GET_USER_NM(T3.USER_ID) AS NAME
             , T1.REG_DTM
             , F_GET_PICTURE_NM(T3.USER_ID) AS PICTURE_NM
             , T3.RELATIONSHIP
        FROM USER_TABLE T1
        JOIN FRIEND_TABLE T2
          ON T1.USER_ID = T2.USER_ID
        JOIN USER_FRIEND_TABLE T3
          ON T2.FRIEND_ID = T3.FRIEND_ID
        WHERE T1.USER_ID = #{userId}
          AND T3.RELATIONSHIP = 'F'
    </select>

    <select id="searchFriend" resultType="com.nks.imgd.dto.user.UserTableDTO">
        SELECT T1.USER_ID
             , F_GET_USER_NM(T1.USER_ID) AS NAME
             , T1.REG_DTM
             , F_GET_PICTURE_NM(T1.USER_ID) AS PICTURE_NM
             , IFNULL(T3.RELATIONSHIP, 'X') AS RELATIONSHIP
        FROM USER_TABLE T1
        JOIN FRIEND_TABLE T2
          ON T1.USER_ID = T2.USER_ID
        JOIN USER_FRIEND_TABLE T3
          ON T2.FRIEND_ID = T3.FRIEND_ID
       WHERE T1.USER_ID = #{userId}
       UNION
       SELECT T1.USER_ID
            , F_GET_USER_NM(T1.USER_ID) AS NAME
            , T1.REG_DTM
            , F_GET_PICTURE_NM(T1.USER_ID) AS PICTURE_NM
            , IFNULL(T3.RELATIONSHIP, 'N') AS RELATIONSHIP
        FROM USER_TABLE T1
        JOIN FRIEND_TABLE T2
          ON T1.USER_ID = T2.USER_ID
        LEFT JOIN USER_FRIEND_TABLE T3
          ON T2.FRIEND_ID = T3.FRIEND_ID
       WHERE T1.USER_ID = #{userId}
    </select>

    <select id="findFriendTableIdByUserId">
        SELECT T1.FRIEND_ID
          FROM FRIEND_TABLE T1
         WHERE T1.USER_ID = #{userId}
         LIMIT 1
    </select>

    <select id="findFriendEachOtherAndNotInGroup" resultType="com.nks.imgd.dto.user.UserTableDTO">
    SELECT T3.USER_ID
         , F_GET_USER_NM(T3.USER_ID) NAME
         , T3.REG_DTM
         , T1.PICTURE_ID
         , F_GET_PICTURE_NM(T3.USER_ID) PICTURE_NM
      FROM USER_TABLE T1
      JOIN FRIEND_TABLE T2
        ON T1.USER_ID = T2.USER_ID
      JOIN USER_FRIEND_TABLE T3
        ON T2.FRIEND_ID = T3.FRIEND_ID
     WHERE T1.USER_ID = #{userId}
       AND T3.RELATIONSHIP = 'F'
       AND T1.USER_ID IN (SELECT A3.USER_ID
                           FROM USER_TABLE A1
                           JOIN FRIEND_TABLE A2
                             ON A1.USER_ID = A2.USER_ID
                           JOIN USER_FRIEND_TABLE A3
                             ON A2.FRIEND_ID = A3.FRIEND_ID
                          WHERE A1.USER_ID = T3.USER_ID
                            AND A3.RELATIONSHIP = 'F')
       AND T3.USER_ID NOT IN (SELECT B2.USER_ID
                                FROM GROUP_TABLE B1
                                JOIN GROUP_USER B2
                                  ON B1.GROUP_ID = B2.GROUP_ID
                               WHERE B1.GROUP_ID = #{groupId}
                                 AND B1.GROUP_MST_USER_ID = #{userId}
                               )
    </select>
    <insert id="makeNewUser">
        INSERT
          INTO USER_TABLE
        VALUES (
                 #{user.userId}
               , #{user.name}
               , #{user.email}
               , #{user.nickName}
               , NULL
               , #{user.loginType}
               , DATE_FORMAT(NOW(), '%Y%m%d')
               , DATE_FORMAT(NOW(), '%Y%m%d')
               , #{user.userId}
               , DATE_FORMAT(NOW(), '%Y%m%d')
               , #{user.userId}
               )
    </insert>

    <update id="updateUser">
        UPDATE USER_TABLE
           SET NICK_NAME = #{user.nickName}
             , LAST_LOGIN_DATE = DATE_FORMAT(NOW(), '%Y%m%d')
             , MOD_DTM = DATE_FORMAT(NOW(), '%Y%m%d')
         WHERE USER_ID = #{user.userId}
    </update>

    <update id="updatePictureId">
        UPDATE USER_TABLE
        SET PICTURE_ID = #{fileId},
            MOD_DTM = DATE_FORMAT(NOW(), '%Y%m%d'),
            MOD_ID  = #{userId}
        WHERE USER_ID = #{userId}
    </update>
    
    <insert id="insertUserFriendTable">
        INSERT
          INTO USER_FRIEND_TABLE
        VALUES (
                 #{friendId}
               , #{targetUserId}
               , #{relationship}
               , DATE_FORMAT(NOW(), '%Y%m%d')
               , #{userId}
               , DATE_FORMAT(NOW(), '%Y%m%d')
               , #{userId}
               )
    </insert>

    <delete id="deleteUserFriendTable">
        DELETE
          FROM USER_FRIEND_TABLE
         WHERE FRIEND_ID = #{user.friendId}
           AND USER_ID = #{user.userId}
    </delete>

</mapper>
